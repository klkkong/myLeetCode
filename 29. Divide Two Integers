# medium, binary search
# Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.
# your function returns INT_MAX when the division result overflows.

# 1. my solution
int divide(int dividend, int divisor) {
        if(divisor==1) return dividend;
        if(divisor==-1)
        {
            if(dividend==INT_MIN)
                return INT_MAX;
            else
                return 0-dividend;
        }
        bool oppo=false,ddisms=false;
        if((dividend>0 && divisor<0) || (dividend<0 && divisor>0))
            oppo=true;
        if(dividend<0) ddisms=true;
        int res=0;
        while(1)
        {
            if(oppo) dividend+=divisor;
            else dividend-=divisor;
            
            if(ddisms && dividend>0)
                break;
            if(!ddisms && dividend<0)
                break;
            
            res++;
        }
        return oppo?0-res:res;
}
    
# result: 14/900, TLE, input: INT_MIN, 2


# 2. 二进制移位 + long long 类型
# 1<<2     1的二进制为 0000 0001   左移2位  0000 0100. 每左移一位就是*2
# 知识点：异或，long long类型以及labs()，二进制移位来实现binary search，即依次计算dividend是divisor的2^n倍

int divide(int dividend, int divisor) {
        if (!divisor || (dividend == INT_MIN && divisor == -1))
            return INT_MAX;
        int sign = ((dividend < 0) ^ (divisor < 0)) ? -1 : 1; // 异或：相同为0，不同为1
        long long dvd = labs(dividend); //如果dividend<0，此处用-dividend不可行，只能用labs
        long long dvs = labs(divisor);
        int res = 0;
        while (dvd >= dvs) { 
            long long temp = dvs, multiple = 1;
            while (dvd >= (temp << 1)) {
                temp <<= 1;
                multiple <<= 1;
            }
            dvd -= temp;
            res += multiple;
        }
        return sign == 1 ? res : -res; 
}
    
