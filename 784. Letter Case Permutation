# easy, backtracking, bit manipulation

# good accepted solution 1
# 第18行，在标准全排列中，是index+1
# 将s[i]的大小写反转：s[i]^=32
class Solution {
public:
    void permute (string S, vector<string>& result, int index)
    {
        result.push_back(S);
        
        if(index == S.size())
            return;      
        
        for (int i = index ; i < S.size(); i++)
        {
            if (isalpha(S[i]))
            {
                S[i] ^= 32;
                permute (S, result, i+1);
                S[i] ^= 32;
            }
        }
    }
    
    vector<string> letterCasePermutation(string S) 
    {
        vector<string> result;
        permute(S, result, 0);
        return result;
    }
};

# good accepted solution 2
class Solution {
    void backtrack(string &s, int i, vector<string> &res) {
        if (i == s.size()) {
            res.push_back(s);
            return;
        }
        backtrack(s, i + 1, res);
        if (isalpha(s[i])) {
            s[i] ^= 32;
            backtrack(s, i + 1, res);
        }
    }
public:
    vector<string> letterCasePermutation(string S) {
        vector<string> res;
        backtrack(S, 0, res);
        return res;
    }
};
