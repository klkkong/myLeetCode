# medium, binary search
# [4,5,6,7,0,1,2]  target=3, return -1; target=0, return 4
# 为了方便，我把4567叫做“大头”，012叫做“小头”，上面例子明显是大头占大多数

# 1. Rotated sorted array一定只有两种情况，大头占优和小头占优。如果target处在大头占优的大头中或者处在小头占优的小头中，则就按普通的binary search
# 处理，否则就将nums[mid]设为inf

int search(vector<int>& nums, int target) {
    int lo = 0, hi = nums.size();
    while (lo < hi) {
        int mid = (lo + hi) / 2;
        
        double num = (nums[mid] < nums[0]) == (target < nums[0]) //这行确定target是否完全在小头或者完全在大头
                   ? nums[mid]
                   : target < nums[0] ? -INFINITY : INFINITY;
                   
        if (num < target)
            lo = mid + 1;
        else if (num > target)
            hi = mid;
        else
            return mid;
    }
    return -1;
}


# 2. Accepted solution
# 思路：在循环中，首先确定是大头占优还是小头占优；然后确定target是否存在于占优的那个区间里
# 细节：(1) while循环中的等号；(2) 42行的等号，处理数组只有两个元素的情况；(3) 44和51行的等号，应对target = nums[left]的情况

class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size()==0) return -1;
        int left=0,right=nums.size()-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(nums[mid]==target)
                return mid;
            if(nums[mid]>=nums[left]) // 大头占优
            {
                if(target<nums[mid] && target>=nums[left])
                    right=mid-1;
                else
                    left=mid+1;
            }
            else // 小头占优
            {
                if(target>nums[mid] && target<=nums[right])
                    left=mid+1;
                else
                    right=mid-1;
            }
        }
        return -1;
    }
};


# 3. 标准binary search

int binarySearch(const int a[], const int size, const int val) {
    int l=0, r=size-1;
    while(l<=r) {
        int mid=l+(r-l)/2;
        if(a[mid]==val) 
            return mid;
        else if(a[mid]>val)
            r=mid-1;
        else
            l=mid+1;
    }
    return -1;
}
