# Given a string, find the length of the longest substring without repeating characters.
# Note that the answer must be a substring, not a subsequence.
# medium, hash map, two pointers

# 1. my solution
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int len=s.length();
        if(len<2) return len;
        int i=0,maxlen=0;
        while(i<len)
        {
            unordered_map<char,int> hm;
            int j=i;
            while(j<len)
            {
                if(hm.count(s[j])==0)
                {
                    hm[s[j]]=1;
                    j++;
                }
                else
                {
                    
                    break;
                }
            }
            int hmsize=hm.size();
            maxlen=max(maxlen,hmsize);
            while(j<len-1 && s[j]==s[j+1])
            {
                j++;
                i=j;
            }
            if(i!=j)
                i++;
        }
        return maxlen;
    }
};

result: Accepeted

# 2. Sliding Window
# 思路：同样是判断s[j]是否存在于[i,j)中，如果有，那么i=j'即s[j]位于子串中的位置
# Java, hashmap
# O(n)
# 重要的是，这也是two pointers的问题，但是该算法中并不是让两个指针都自增，而是有一个自增，另一个会被更新

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}
