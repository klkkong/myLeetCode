# medium, binary search, divide and conquer

# 1. my accepted solution
# 思路：每行和每列都是递增，只遍历第一行，每遍历一个元素（即matrix[0][i]），如果小于target，就对该列进行binary search，否则，target一定不存在
class Solution {
public:
    bool colBS(vector<vector<int>>& matrix, int target, int pos, int row) {
        int l=0,r=row-1;
        while(l<=r)
        {
            int mid=(l+r)/2;
            if(matrix[mid][pos]==target) return true;
            else if(matrix[mid][pos]<target)
                l=mid+1;
            else
                r=mid-1;
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row=matrix.size();
        if(row<1) return false;
        int col=matrix[0].size();
        if(col<1) return false;
        for(int i=0;i<col;i++)
        {
            if(matrix[0][i]==target) return true;
            else if(matrix[0][i]<target)
            {
                bool res=colBS(matrix,target,i,row);
                if(res) return true;
            }
            else
                break;
        }
        return false;
    }
};
# result: beat 13%

# 2. good Java solution
# 思路：从最后一列的第一个元素开始，如果target < matrix[row][col]，则可排除该列；反之则排除该行
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length < 1 || matrix[0].length <1) {
            return false;
        }
        int col = matrix[0].length-1;
        int row = 0;
        while(col >= 0 && row <= matrix.length-1) {
            if(target == matrix[row][col]) {
                return true;
            } else if(target < matrix[row][col]) {
                col--;
            } else if(target > matrix[row][col]) {
                row++;
            }
        }
        return false;
    }
}
